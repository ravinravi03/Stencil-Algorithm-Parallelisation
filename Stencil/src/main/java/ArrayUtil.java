import java.util.Random;

public class ArrayUtil {

    /**
     * Generates an square matrix that contains random values
     * @param size the length of the array
     * @param bound the max value generated by the random number generator
     * @return
     */
    public static int[][] generateRandomGrid(int size, int bound){
        int [][] grid = new int[size][size];
        Random random = new Random();
        for(int i = 0;i < size;i++){
            for(int j=0;j<size;j++){
                grid[i][j]= random.nextInt(bound);
            }
        }
        return grid;
    }

    /**
     * Generates a square 3D matric that contains random values
     * @param size the length of the array
     * @param bound the max value generated by the random number generator
     * @return
     */
    public static int[][][] generateRandom3DGrid(int size, int bound){
        int [][][] grid = new int[size][size][size];
        Random random = new Random();
        for(int i = 0;i < size;i++){
            for(int j=0;j<size;j++){
                for(int k=0;k<size;k++){
                    grid[i][j][k]= random.nextInt(bound);
                }

            }
        }
        return grid;
    }

    /**
     * Prints out the vector
     * @param grid the vector that is printed to the terminal
     */
    public static void printVector(int [] grid){
        for(int i=0;i<grid.length;i++){
            System.out.print(grid[i]+" | ");
        }
        System.out.println(" ");
    }

    /**
     * Prints out the array
     * @param grid the array that is printed to the terminal
     */
    public static void printGrid(int [][] grid){
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid.length;j++){
                System.out.print(grid[i][j]+" | ");
            }
            System.out.println(" ");
        }
        System.out.println(" ");
    }

    /**
     * Prints out the 3D array
     * @param grid
     */
    public static void print3DGrid(int[][][] grid) {
        for (int i = 0; i < grid.length; i++) {
            System.out.println("Slice " + i + ":");
            for (int j = 0; j < grid.length; j++) {
                for (int k = 0; k < grid.length; k++) {
                    System.out.print(grid[i][j][k] + " | ");
                }
                System.out.println();
            }
            System.out.println();
        }
    }



    /**
     * Copies only the bordering elements of an array
     *
     * @param grid
     * @return
     */
    public static int[][] copyExistingGrid(int[][] grid){
        int [][] gridCopy = new int[grid.length][grid.length];
        for(int i = 0;i < grid.length;i++){
            gridCopy[0][i] = grid[0][i];
            gridCopy[grid.length-1][i] = grid[grid.length-1][i];
            gridCopy[i][0] = grid[i][0];
            gridCopy[i][grid.length-1] = grid[i][grid.length-1];
        }
        return gridCopy;
    }


    /**
     * Copies only the bordering elements of an array
     *
     * @param grid
     * @return
     */
    public static int[][][] copyExisting3DGrid(int[][][] grid){
        int [][][] gridCopy = new int[grid.length][grid.length][grid.length];
        for(int i = 0;i < grid.length;i++){
            for(int j = 0;j<grid.length;j++){
                gridCopy[0][i][j] = grid[0][i][j];
                gridCopy[grid.length-1][i][j] = grid[grid.length-1][i][j];
                gridCopy[i][0][j] = grid[i][0][j];
                gridCopy[i][grid.length-1][j] = grid[i][grid.length-1][j];
                gridCopy[i][j][0] = grid[i][j][0];
                gridCopy[i][j][grid.length-1] = grid[i][j][grid.length-1];
            }
        }
        return gridCopy;
    }

    public static int[] convertTo1D(int[][] grid) {
        int length = grid.length;
        int[] result = new int[length*length];

        for (int i = 0; i < length; i++) {
            for (int j = 0; j < length; j++) {
                result[i * length + j] = grid[i][j];
            }
        }

        return result;
    }

    /**
     * Converts a vector into a 2D matrix, only works for square matrices eg. 4x4 matrix, 20x20 matrix
     */
    public static int[][] convertTo2D(int[] grid1D) {
        int size = (int) Math.sqrt(grid1D.length);
        int[][] result = new int[size][size];

        for (int i = 0; i < size; i++) {
            for (int j = 0; j < size; j++) {
                result[i][j] = grid1D[i * size + j];
            }
        }

        return result;
    }
}
